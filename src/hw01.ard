-- 1. Установите arend, следуя инструкциям на странице https://arend-lang.github.io/download
--    В IDEA можно просто импортировать данный проект.

-- 2. Определите аналоги следующих функций на языке хаскелл.
{- Haskell:
   second :: Nat -> Nat -> Nat -> Nat
   second _ y _ = y

   apply :: (Nat -> Nat) -> Nat -> Nat
   apply f x = f x

   compose :: (Nat -> Nat) -> (Nat -> Nat) -> Nat -> Nat
   compose f g x = f (g x)

   flip :: (Nat -> Nat -> Nat) -> Nat -> Nat -> Nat
   flip f x y = f y x

   second' = flip (second 0)
-}

\func second (_ y _ : Nat) : Nat => y
\func apply (f : Nat -> Nat) (x : Nat) : Nat => f x
\func compose (f g : Nat -> Nat) (x : Nat) : Nat => f (g x)
\func flip (f : Nat -> Nat -> Nat) (x y : Nat) => f y x
\func second' => flip (second 0)

-- 3. Расставьте приоритеты функций f1, f2, f3, f4, f5 и f6 так, чтобы функция test проходила тайпчекинг.

\import lect01 \hiding (+,*)

\func f1 (x y : Nat) => x
\func f2 : Nat => 0
\func \infix 5 f3 (f : Nat -> Nat) (z : Nat) : Int => 0
\func f4 : Nat => 0
\func \infix 6 f5 => f1
\func f6 => f4

\func test => f1 f2 f3 f4 f5 f6

-- 4. Определите функцию if, аналогичную следующей функции:
{- Haskell:
   if :: Bool -> Bool -> Bool -> Bool
   if True t _ = t
   if False _ e = e
-}

\func if (cond t e : Bool) : Bool \elim cond
  | true => t
  | false => e

-- 5. Определите || через if.

\func \infixr 2 || (x y : Bool) : Bool => if x true y

-- 6. Определите возведение в степень и факториал для натуральных чисел.

\open Nat \hiding (-,div) -- Здесь лежат + и *.

\func \infixr 8 ^ (x y : Nat) : Nat \elim y
  | 0 => 1
  | suc y => x * x ^ y

\func fac (_ : Nat) : Nat
  | 0 => 1
  | suc x \as p => p * fac x

-- 7. Определите mod и gcd.

\func mod (x y : Nat) => aux x x
  \where {
    \func aux (fuel x : Nat) : Nat \elim fuel
      | 0 => 0
      | suc fuel => lect01.if (x < y) x (aux fuel (x - y))
  }

\func modTest1 : mod 10 3 = 1 => idp
\func modTest2 : mod 18 5 = 3 => idp
\func modTest3 : mod 20 7 = 6 => idp
\func modTest4 : mod 100 25 = 0 => idp
\func modTest5 : mod 9 2 = 1 => idp
\func modTest6 : mod 15 4 = 3 => idp
\func modTest7 : mod 35 6 = 5 => idp


\func gcd (x y : Nat) => aux (x + 1) x y
  \where {
    \func aux (fuel x y : Nat) : Nat \elim fuel
      | 0 => 0
      | suc fuel => \case y \with {
        | 0 => x
        | _ => aux fuel y (x `mod` y)
      }
  }

\func gcdTest1 : gcd 1 1 = 1 => idp
\func gcdTest2 : gcd 10 5 = 5 => idp
\func gcdTest3 : gcd 18 24 = 6 => idp
\func gcdTest4 : gcd 100 75 = 25 => idp
\func gcdTest5 : gcd 7 3 = 1 => idp
\func gcdTest6 : gcd 48 18 = 6 => idp
