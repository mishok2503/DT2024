\import Data.Bool
\import Data.List
\import Function.Meta
\import Logic
\import Meta
\import Paths
\import Paths.Meta
\import lect06 (Decide, no, yes)
\import lect10

-- 1. Пусть f : A -> B и g : B -> C ─ некоторые функции.
--    Докажите, что если f и g инъективны, то g `o` f также инъективна.
--    Докажите, что если g `o` f инъективна, то f также инъективна.

-- Композиция функций
\func \fixr 9 o {A B C : \Type} (g : B -> C) (f : A -> B) => \lam a => g (f a)

\func o-inj {A B C : \Type} (f : A -> B) (g : B -> C) (p : isInj f) (q : isInj g) : isInj (g `o` f)
  => \lam t => p $ q t

\func o-inj' {A B C : \Type} (f : A -> B) (g : B -> C) (p : isInj (g `o` f)) : isInj f
  => \lam t => p (o g t)

-- 2. Определите предикат "делится на 3 или на 5" так, чтобы он возвращал утверждения.
--    Докажите, что MultipleOf3Or5 вкладывается в ℕ.

\func isMultipleOf3Or5 (n : Nat) : \Type => Or (\Sigma (mod5 n = 0) (Not (mod3 n = 0))) (mod3 n = 0)

\func isMultipleOf3Or5-isProp (n : Nat) : isProp (isMultipleOf3Or5 n)
  => \lam x y => cases(x, y) \with {
    | inl a, inl a1 => pmap inl $ ext
    | inl a, inr b => absurd $ a.2 b
    | inr b, inl a => absurd $ a.2 b
    | inr b, inr b1 => pmap inr $ ext
  }

\func MultipleOf3Or5 => \Sigma (n : Nat) (isMultipleOf3Or5 n)

\func Mul-inc (m : MultipleOf3Or5) => m.1

\func Mul-inc-isInj : isInj Mul-inc
  => \lam p => ext (p, isMultipleOf3Or5-isProp _ _ _)

-- 3. Мы будем говорить, что тип A тривиален, если существует элемент в A, такой что любой другой элемент в A равен ему.
--    Докажите, что тип A тривиален тогда и только тогда, когда A является утверждением и A населен.

\func isTriv (A : \Type) => \Sigma (a : A) (\Pi (a' : A) -> a = a')

\func \infix 1 <-> (A B : \Type) => \Sigma (A -> B) (B -> A)

\func isTriv-lem (A : \Type) : isTriv A <-> (\Sigma (isProp A) A) => (
  \lam t => (\lam _ _ => rewriteI t.2 $ t.2 _, t.1),
  \lam t => (t.2, t.1 _)
)

-- 4. Докажите, что Either не является утверждением в общем случаем.

\func Either-isProp (p : \Pi {A B : \Type} (pA : isProp A) (pB : isProp B) -> isProp (Or A B)) : Empty
  => cases ((p Unit-isProp Unit-isProp) (inl ()) (inr ()))

-- 5. Докажите, что LessOrEq является предикатом.

\data LessOrEq (n m : Nat) : \Set0 \with
  | 0, m => z<=n
  | suc n, suc m => s<=s (LessOrEq n m)

\func LessOrEq-isProp {n m : Nat} : isProp (LessOrEq n m)
  => aux n m
  \where {
    \func aux (n m : Nat) (x y : LessOrEq n m) : x = y
    | 0, m, z<=n, z<=n => idp
    | suc n, suc m, s<=s x, s<=s y => pmap s<=s $ aux n m x y
  }

-- 6. Докажте, что ReflClosure LessOrEq не является предикатом, а ReflClosure (\lam x y => T (x < y)) является.

\func \infix 4 < (n m : Nat) : Bool
  | _, 0 => false
  | 0, suc _ => true
  | suc n, suc m => n < m

\data ReflClosure (R : Nat -> Nat -> \Type) (x y : Nat)
  | refl (x = y)
  | inc (R x y)

\func not-n<n {n : Nat} (r : So (n < n)) : Empty \elim n
  | suc _ => not-n<n r

\func ReflClosure_<-isProp (n m : Nat) : isProp (ReflClosure (\lam x y => So (x < y)) n m)
  => \lam x y => cases(x, y) \with {
    | refl p, refl p1 => pmap refl $ ext
    | refl p, inc r => absurd $ aux p r
    | inc r, refl p => absurd $ aux p r
    | inc r, inc r1 => pmap inc So-lem
  }
  \where {
    \func aux (p : n = m) (r : So (n < m)) : Empty \elim p
      | idp => not-n<n r
  }

\func ReflClosure_<=-isNotProp (p : \Pi (n m : Nat) -> isProp (ReflClosure LessOrEq n m)) : Empty
  => cases(p 0 0 (refl idp) (inc z<=n))

-- 7. Докажите, что если тип A вкладывается в тип B и B является утверждением, то и A является утверждением.

\func sub-isProp {A B : \Type} (f : A -> B) (p : isInj f) (q : isProp B) : isProp A
  => \lam x y => p $ q (f x) (f y)

-- 8. Докажите, что тип с разрешимым равенством являетя множеством.

\func Dec-isSet {A : \Type} (dec : \Pi (x y : A) -> Decide (x = y)) : isSet A
  => setLem make-obj obj-isProp obj-refl obj-to-=
  \where {
    \func make-obj (xs ys : A) : \Type
      => So (cases (dec xs ys) \with {
        | yes a => true
        | no n => false
      })

    \func obj-refl (xs : A) : make-obj xs xs
      => idp

    \func obj-to-= {xs ys : A} (p : make-obj xs ys) : xs = ys
      => p

    \func obj-isProp (xs ys : A) : isProp (make-obj xs ys)
      => \let r => dec xs ys
        \in \lam x y => cases r \with {
          | yes a => {?}
          | no n => absurd $ n x
        }
  }

-- 9. Если A и B являются множествами, то A `Or` B тоже является множеством.

\data \fixr 2 Or (A B : \Type)
  | inl A
  | inr B

\func or-isSet {A B : \Type} (p : isSet A) (q : isSet B) : isSet (Or A B)
  => setLem make-obj obj-isProp obj-refl obj-to-=
  \where {
    \func make-obj (xs ys : Or A B) : \Type \elim xs, ys
      | inl x, inl y => x = y
      | inr x, inr y => x = y
      | _, _ => Empty

    \func obj-refl (xs : Or A B) : make-obj xs xs \elim xs
      | inl a => idp
      | inr b => idp

    \func obj-to-= {xs ys : Or A B} (p : make-obj xs ys) : xs = ys \elim xs, ys
      | inl x, inl y => pmap inl p
      | inl x, inr y => absurd p
      | inr x, inl y => absurd p
      | inr x, inr y => pmap inr p

    \func obj-isProp (xs ys : Or A B) : isProp (make-obj xs ys) \elim xs, ys
      | inl a, inl a1 => p _ _
      | inl a, inr b => Empty-isProp
      | inr b, inl a => Empty-isProp
      | inr b, inr b1 => q _ _
  }

-- 10. Если B x является множеством, то \Pi (x : A) -> B x тоже является множеством.

\func pi-isSet {A : \Type} (B : A -> \Type) (p : \Pi (x : A) -> isSet (B x)) : isSet (\Pi (x : A) -> B x)
  => setLem make-obj obj-isProp obj-refl obj-to-=
  \where {
    \func C => \Pi (x : A) -> B x
    \func make-obj (xs ys : C) : \Type
      => \Pi (t : A) -> xs t = ys t

    \func obj-refl (xs : C) : make-obj xs xs
      => \lam _ => idp

    \func obj-to-= {xs ys : C} (p : make-obj xs ys) : xs = ys
      => ext p

    \func obj-isProp (xs ys : C) : isProp (make-obj xs ys)
      => forall-isProp (\lam t => xs t = ys t) (\lam t => (p t) (xs t) (ys t))
  }

-- 11. Докажите, что если A является множеством, то List A также им является.

\func List-isSet {A : \Type} (pA : isSet A) : isSet (List A)
  => setLem make-obj obj-isProp obj-refl obj-to-=
  \where {
    \func make-obj (xs ys : List A) : \Type \elim xs, ys
      | nil, nil => \Sigma
      | x :: xs, y :: ys => \Sigma (x = y) (make-obj xs ys)
      | _, _ => Empty

    \func obj-refl (xs : List A) : make-obj xs xs \elim xs
      | nil => ()
      | a :: xs => (idp, obj-refl xs)

    \func obj-to-= {xs ys : List A} (p : make-obj xs ys) : xs = ys \elim xs, ys
      | nil, nil => idp
      | nil, y :: ys => absurd p
      | x :: xs, nil => absurd p
      | x :: xs, y :: ys => rewrite p.1 $ pmap (y :: ) $ obj-to-= p.2

    \func obj-isProp (xs ys : List A) : isProp (make-obj xs ys) \elim xs, ys
      | nil, nil => Unit-isProp
      | nil, a :: ys => Empty-isProp
      | a :: xs, nil => Empty-isProp
      | x :: xs, y :: ys => Sigma-isProp (pA _ _) (obj-isProp xs ys)
  }
