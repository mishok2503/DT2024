\import Data.Bool
\import Data.Or
\import Function.Meta
\import Logic
\import Meta
\import Paths
\import Paths.Meta

-- 1. Подмножества, инъективные функции.

-- В теории множеств мы можем использовать подмножества:
-- { x : A | P x } <= A
-- Любой элемент подмножества буквально является элементом исходного множества.

-- In set theory, we have a bijection between subsets of A
-- and equivalence classes of injective function (B -> A)

-- Другой способ -- это вместо подмножеств использовать инъективные функции.
-- В теории типов нам доступен только второй способ.
-- Например, подмножество выше превращается в следующую функцию:
-- \lam t => t.1 : \Sigma (x : A) (P x) -> A
-- Является ли данная функция инъективной?

\func isEven (n : Nat) : Bool
  | 0 => true
  | 1 => false
  | suc (suc n) => isEven n

-- Рассмотрим частный случай этой конструкции.
-- { n : Nat | So (isEven n) } -- теоретико-множественная нотация
\func Even => \Sigma (n : Nat) (So (isEven n)) -- в теории типов записывается так

-- Функция вложения множества четных чисел в множество всех натуральных чисел.
\func Even-inc (e : Even) : Nat => e.1

\func isInj {A B : \Type} (f : A -> B) : \Type
  => \Pi {x y : A} -> f x = f y -> x = y
-- Это эквивалентно следующему утверждению только если есть аксиома исключенного третьего.
-- \Pi (x y : A) -> Not (x = y) -> Not (f x = f y)

\func So-lem {b : Bool} {x y : So b} : x = y \elim b
  | false => absurd x
  | true => idp

-- Доказательство того, что четные числа вкладываются в натуральные.
\func Even-inc-isInj : isInj Even-inc
  => \lam p => sigmaEq p So-lem

-- Чтобы доказать, что пары t1 и t2 равны, достаточно доказать, что их компоненты равны.
\func prodEq {A B : \Type} (t1 t2 : \Sigma A B) (p : t1.1 = t2.1) (q : t1.2 = t2.2) : t1 = t2
  => pmap2 (\lam x y => (x,y)) p q

-- Обобщение предыдущего утверждения для зависимых пар.
-- t1.2 : B t1.1
-- t2.2 : B t2.1
\func sigmaEq {A : \Type} {B : A -> \Type} {t1 t2 : \Sigma (x : A) (B x)}
              (p : t1.1 = t2.1) (q : transport B p t1.2 = t2.2) : t1 = t2
  => ext (p,q)

-- sigmaEq можно доказать напрямую
\func sigmaEq' {A : \Type} (B : A -> \Type) (t1 t2 : \Sigma (x : A) (B x))
               (p : t1.1 = t2.1) (q : transport B p t1.2 = t2.2) : t1 = t2 \elim t1, t2, p, q
  | (x,y), (x',y'), idp, idp => idp

-- 2. Еще один пример.

\func mod3 (n : Nat) : Nat
  | 0 => 0
  | 1 => 1
  | 2 => 2
  | suc (suc (suc n)) => mod3 n

\func mod5 (n : Nat) : Nat
  | 0 => 0
  | 1 => 1
  | 2 => 2
  | 3 => 3
  | 4 => 4
  | suc (suc (suc (suc (suc n)))) => mod5 n

-- Определим множество чисел, которые делятся на 3 или на 5.
\func MultipleOf3Or5 => \Sigma (n : Nat) (Or (mod3 n = 0) (mod5 n = 0))

-- Функция, отображающая это множество в множество натуральных чисел.
\func Mul-inc (m : MultipleOf3Or5) : Nat => m.1

-- Она не является инъективной.
\func Mul-inc-isInj (p : isInj Mul-inc) : Empty
  => \let t => p {15, inl idp} {15, inr idp} idp
     \in {?}
-- Проблема в том, что у нас может быть несколько различных доказательств того факта, что число делится на 3 или на 5.

-- 2'. Образ

\func Image {A B : \Type} (f : A -> B) => \Sigma (b : B) (\Sigma (a : A) (f a = b))

-- 3. Утверждения

-- Проблемы в предыдущем примере не возникло, если бы тип, определяющий подмножество, был утверждением, то есть любые его два элемента были бы равны.
\func isProp (A : \Type) : \Type
  => \Pi (x y : A) -> x = y

-- Пример не утверждения.
\func BoolIsNotProp (p : isProp Bool) : Empty
  => \case p true false

-- 4. Какие предикаты являются настоящими предикатами (то есть возвращают утверждения)?
--    ⊤, ⊥, ∧, ∨, →, ∀, ∃, =, рекурсвиные предикаты, индуктивные предикаты.

-- Пустой тип является утверждением.
\func Empty-isProp : isProp Empty
  => \lam x => absurd x

-- Одноэлементный тип является утверждением.
\func Unit-isProp : isProp (\Sigma)
  => \lam x y => idp

-- Если A и B являются утверждениями, то их произведение (конъюнкция) тоже является утверждением.
\func Sigma-isProp {A B : \Type} (pA : isProp A) (pB : isProp B) : isProp (\Sigma A B)
  => \lam s t => ext (pA s.1 t.1, pB s.2 t.2)

\func Sigma'-isProp {A : \Type} (B : A -> \Type)
                    (pA : isProp A)
                    (pB : \Pi (x : A) -> isProp (B x))
  : isProp (\Sigma (x : A) (B x))
  => \lam s t => ext (pA s.1 t.1, pB _ _ _)

-- Это не верно для сумм типов, то есть у нас нет (пока) дизъюнкций.
-- \func Or-isProp {A B : \Type} (pA : isProp A) (pB : isProp B) : isProp (Or A B)
--   => {?}

-- У нас есть импликации.
\func Impl-isProp {A B : \Type} {- (pA : isProp A) -} (pB : isProp B) : isProp (A -> B)
  => \lam f g => ext \lam a => pB (f a) (g a)

-- И квантор всеобщности.
\func forall-isProp {A : \Type} (B : A -> \Type) (pB : \Pi (x : A) -> isProp (B x))
  : isProp (\Pi (x : A) -> B x)
  => \lam f g => ext \lam a => pB a (f a) (g a)

{- Но квантора существования у нас (пока) нет.
\func exists-isProp {A : \Type} (B : A -> \Type) (pB : \Pi (x : A) -> isProp (B x))
 : isProp (\Sigma (x : A) (B x))
  => {?}
-}

{- Рекурсивно определенный предикат является утверждением, если ... являются таковыми
\func pred (n : Nat) : \Type
  | 0 => ...
  | suc n => ...
-}

-- Индуктивно определенный предикат может быть утверждением, а может и не быть им.

-- Является утверждением
\data \infix 4 <=' (n m : Nat) \with
  | 0, _ => zero<=_
  | suc n, suc m => suc<=suc (n <=' m)

-- Не является утверждением
\data \infix 4 <='' (n m : Nat) \elim m
  | m => <=-refl (n = m)
  | 1 => zero<=one (n = 0)
  | suc m => <=-step (n <='' m)

-- Равенство тоже в общем случае не является утверждением.
-- \func equality-isProp {A : \Type} (a a' : A) : isProp (a = a') => {?}

-- Но для многих типов это верно.
-- Мы будем называть такие типы множествами.
-- Позже мы увидим, что большинство типов являются множествами.
\func isSet (A : \Type) : \Type
  => \Pi (a a' : A) -> isProp (a = a') -- \Pi (a a' : A) (p q : a = a') -> p = q

-- 5. Примеры множеств: Unit, \Sigma.

\func Empty-isSet : isSet Empty
  => \lam a => absurd a

\func retract-isProp {A B : \Type} (pB : isProp B)
                     (f : A -> B) (g : B -> A) (h : \Pi (x : A) -> g (f x) = x)
  : isProp A
  => \lam x y => inv (h x) *> pmap g (pB _ _) *> h y

\func Unit-isSet : isSet (\Sigma)
  => \lam a a' => retract-isProp Unit-isProp (\lam p => ()) (\lam _ => idp) {?}

\data Unit | unit

\func Unit'-isProp (a a' : Unit) : a = a' \elim a, a'
  | unit, unit => idp

\func Unit'-refl (a : Unit) : Unit'-isProp a a = idp \elim a
  | unit => idp

\func Unit'_= {a a' : Unit} (p : a = a') : Unit'-isProp a a' = p \elim p
  | idp => Unit'-refl a

\func Unit'-isSet : isSet Unit
  => \lam a a' => retract-isProp Unit-isProp (\lam _ => ()) (\lam _ => Unit'-isProp a a') Unit'_=

-- 6. setLem

\func setLem {A : \Type} (B : A -> A -> \Type) (pB : \Pi (x y : A) -> isProp (B x y))
             -- (f' : \Pi {a a' : A} -> a = a' -> B a a')
             (f : \Pi (a : A) -> B a a)
             (g : \Pi {a a' : A} -> B a a' -> a = a')
             : isSet A
  => \lam a a' =>
      \let | f' {a a' : A} (p : a = a') : B a a' => transport (B a) p (f a)
           | h {a a' : A} (p : a = a') => g (f' p)
           | idemp {a a' : A} (p : a = a') : h (h p) = h p => pmap g (pB _ _ _ _)
           | lem {a a' : A} (p : a = a') : h p = h idp *> p => \case \elim a', \elim p \with {
             | a'1, idp => idp
           }
           | h=id {a a' : A} (p : a = a') : h p = p => \case \elim a', \elim p \with {
             | a'1, idp => inv $ cancelLeft (h idp) idp _ $ inv (idemp idp) *> lem {a} (h idp)
           }
      \in retract-isProp (pB a a') f' g h=id

\func Sigma-isSet {A : \Type} (B : A -> \Type)
                  (pA : isSet A) (pB : \Pi (x : A) -> isSet (B x))
  : isSet (\Sigma (x : A) (B x))
  => setLem {\Sigma (x : A) (B x)} (\lam s t => \Sigma (p : s.1 = t.1) (transport B p s.2 = t.2))
      (\lam s t => Sigma'-isProp _ (pA _ _) (\lam p => pB t.1 (transport B p s.2) t.2))
      (\lam s => (idp,idp))
      (\lam q => ext q)

-- 6. Свойства операций над =.

\func isGpd (A : \Type)
  => \Pi (a a' : A) -> isSet (a = a')

-- Так как равенства могут быть нетривиальными типами, то различные операции над ними могут быть нетривиальными функциями, а не просто доказательствами импликаций.
-- Например, функция, доказывающая транзитивность, примененная к \Set задает композицию биекций.
-- \func \infixr 5 *> {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') : a = a''
--  \elim q
--  | idp => p

-- Мы можем доказывать различные свойства этой функции.
-- Например, idp является единицей справа и слева для *.
\func idp-right {A : \Type} {x y : A} (p : x = y) : p *> idp = p
  => idp

\func idp-left {A : \Type} {x y : A} (p : x = y) : idp *> p = p \elim p
  | idp => idp

-- * ассоциативна.
\func *-assoc {A : \Type} {x y z w : A} (p : x = y) (q : y = z) (r : z = w)
  : (p *> q) *> r = p *> (q *> r) \elim r
  | idp => idp

-- inv возвращает обратный элемент.
\func inv-left {A : \Type} {x y : A} (p : x = y) : inv p *> p = idp \elim p
  | idp => idp

\func inv-right {A : \Type} {x y : A} (p : x = y) : p *> inv p = idp \elim p
  | idp => idp

-- То есть * похожа на операцию в группе.
-- Мы можем доказать различные равенства, верные в группах.
-- Например, мы можем доказать, что можно сокращать слева на элемент.
\func cancelLeft {A : \Type} {x y z : A} (p : x = y) (q r : y = z)
                 (s : p *> q = p *> r) : q = r \elim p, q
  | idp, idp => s *> idp-left r
